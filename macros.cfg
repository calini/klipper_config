#####################################################################
#	Macros
#####################################################################

## Start/end

[gcode_macro PRINT_START] # params: EXTRUDER, BED
gcode:
    # Set temperatures
    {% set BED_TEMP = params.BED|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|float %}
    
    M140 S{BED_TEMP}
    # M104 S{EXTRUDER_TEMP}     ; only set bed temp, give time for heat to sink
    
    CG28                        ; Home all axes
    G90                         ; set absolute mode
    SHOW_PRINTHEAD              ; Bring printhead forward for last-minute cleaning

    # Wait for temperatures
    M190 S{BED_TEMP}            ; Set and wait for bed temp
    M109 S{EXTRUDER_TEMP}       ; Set and wait for extruder temp

    DRAW_PURGE_LINE
    G92 E0.0

[gcode_macro DRAW_PURGE_LINE]
gcode:
    SAVE_GCODE_STATE NAME=purge
    G90                         ; set absolute mode

    G1 Z2.0 F3000               ; move Z=2 to prevent scratching

    G1 X5 Y1 F12000             ; Move to initial position
    G1 Z0.28 F500               ; lower to start of intro line
    M83                         ; set extruder to relative

    G1 X50 E5.0 F2500.0         ; to the right, to the right
    G1 Y1.3 F6000               ; move .3mm forward
    G1 X5 E6.0 F2000.0          ; to the left, to the left

    G1 Z2.0 F3000               ; move Z=2 again to prevent scratching

    RESTORE_GCODE_STATE NAME=purge

[gcode_macro PRINT_END]
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y} F3600          ; park nozzle at rear


## Load/unload

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=load
    M83                            ; set extruder to relative
    G1 E30 F300                    ; load
    G1 E15 F150                    ; prime nozzle with filament
    RESTORE_GCODE_STATE NAME=load
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=unload
    M83                            ; set extruder to relative
    G1 E10 F300                    ; extrude a little to soften tip
    G1 E-40 F1800                  ; retract some, but not too much or it will jam
    RESTORE_GCODE_STATE NAME=unload


## Nevermore Micro Air Filter

[gcode_macro TURN_ON_SMART_FILTER]
gcode:
    {% set SPEED = params.SPEED|default(0.5)|float %}
    {% if params.MATERIAL is in(["ABS", "ASA", "PC"]) %}
        TURN_ON_FILTER SPEED={SPEED}
    {% else %}
        TURN_OFF_SMART_FILTER
    {% endif %}

[gcode_macro TURN_OFF_SMART_FILTER]
gcode:
    UPDATE_DELAYED_GCODE ID=FILTER_OFF_LATER DURATION=120 # 2 mins delay

[delayed_gcode FILTER_OFF_LATER]
gcode:
    TURN_OFF_FILTER

[gcode_macro TURN_ON_FILTER]
gcode:
    {% set SPEED = params.SPEED|default(0.5)|float %}
    SET_FAN_SPEED FAN=filter SPEED={SPEED}

[gcode_macro TURN_OFF_FILTER]
gcode:
    SET_FAN_SPEED FAN=filter SPEED=0.0


## LED Lights

[gcode_macro TURN_ON_LEDS]
gcode:
    {% set VALUE = params.VALUE|default(0.1)|float %}
    SET_PIN PIN=lights VALUE={VALUE}

[gcode_macro TURN_OFF_LEDS]
gcode:
    SET_PIN PIN=lights VALUE=0


## Saved Posiitons

[gcode_macro SHOW_PRINTHEAD] # Move printhead to an accessible spot for maintenance
gcode:
    CG28                            ; home all axes
    
    SAVE_GCODE_STATE NAME=printhead
    G90                             ; set absolute mode

    G1 Z30 F6000                    ; lower bed
    G1 X60 Y5 Z60 F6000             ; center printhead close to front

    {% set EXTRUDER_TEMP = params.TEMP|default(0)|float %} # set extruder temp if TEMP set
    {% if EXTRUDER_TEMP > 0 %}
        M104 S{EXTRUDER_TEMP}
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=printhead

[gcode_macro CENTER]
gcode:
    CG28                             ; home all axes

    SAVE_GCODE_STATE NAME=center
    G90                              ; set absolute mode

    G1 X60 Y60                       ; move to center

    RESTORE_GCODE_STATE NAME=center

## Pause/Resume

[pause_resume] ; Enable pause/resume

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    TURN_OFF_SMART_FILTER
    CLEAR_PAUSE
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
variable_extrude: 0.2   ; change this if you need more or less extrusion
gcode:
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}        ; read E from pause macro
    SAVE_GCODE_STATE NAME=PAUSE_state 

    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G90
    PARK

[gcode_macro PARK]
gcode:
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}  ; set park positon for x
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}  ; set park positon for y
    
    {% set max_z = printer.toolhead.axis_maximum.z|float %}         ; calculate save park position for z
    {% set act_z = printer.toolhead.position.z|float %}
    {% if (act_z + 2.0) > max_z %}
        {% set z_safe = max_z %}
    {% else %}
        {% set z_safe = act_z + 2.0 %}
    {% endif %}

    G1 Z{z_safe} F900                   ; lift by safe margin
    G1 X{x_park} Y{y_park} F12000       ; move to corner
    
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}         ; read E from pause macro
    
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME


## Remappings

[gcode_macro CG28] # Conditional G28
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
    
[gcode_macro M601] # Remapping for PrusaSlicer/SuperSlicer
gcode:
    PAUSE

[gcode_macro TURN_OFF_MOTORS]
gcode:
    M84

[gcode_macro TURN_OFF_FANS]
gcode:
    M106 S0


## Testing

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED
